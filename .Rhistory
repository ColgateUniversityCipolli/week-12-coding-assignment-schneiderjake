type1_estimate <- rejects / n.sims
cat("Estimated Type I error rate:", round(type1_estimate, 4), "\n")
library(tidyverse)
library(VGAM)
library(boot)
c20 <- qt(.95, df = 19)
c30 <- qt(.95, df=29)
#function
sim_experiment <- function() {
#30 samples
observations <- rlaplace(30, location=a, scale=b)
#t stat month 20
mean_20 <- mean(observations[1:20])
sd_20 <- sd(observations[1:20])
t_20 <- (mean_20 - 0) / (sd_20 / sqrt(20))
#rejection check at month 20
if (t_20 > c20) {
return(1)  #reject H0 (early stop)
}
#t stat month 30
mean_30 <- mean(observations)
sd_30 <- sd(observations)
t_30 <- (mean_30 - 0) / (sd_30 / sqrt(30))
#reject check at month 30
if (t_30 > c30) {
return(1)  #reject H0
} else {
return(0)  #fail to reject H0
}
}
#run the simulation
results <- replicate(n_sims, sim_experiment())
#calc Type I error rate
type_I_error <- mean(results)
print(paste("Type I error rate:", round(type_I_error, 4)))
library(tidyverse)
library(VGAM)
library(boot)
c20 <- qt(.95, df = 19)
c30 <- qt(.95, df=29)
#function
sim_experiment <- function() {
#30 samples
observations <- rlaplace(30, location=a, scale=b)
#t stat month 20
mean_20 <- mean(observations[1:20])
sd_20 <- sd(observations[1:20])
t_20 <- (mean_20 - 0) / (sd_20 / sqrt(20))
#rejection check at month 20
if (t_20 > c20) {
return(1)  #reject H0 (early stop)
}
#t stat month 30
mean_30 <- mean(observations)
sd_30 <- sd(observations)
t_30 <- (mean_30 - 0) / (sd_30 / sqrt(30))
#reject check at month 30
if (t_30 > c30) {
return(1)  #reject H0
} else {
return(0)  #fail to reject H0
}
}
#run the simulation
results <- replicate(n_sims, sim_experiment())
#calc Type I error rate
type_I_error <- mean(results)
print(paste("Type I error rate:", round(type_I_error, 4)))
set.seed(2405)
n <- 15
n.sims <- 10000
alpha <- 0.05
#function to run Type I error simulation
simulate_type1_error <- function(shape1, shape2, true_mean) {
left_rejects <- 0
right_rejects <- 0
two_rejects <- 0
for (i in 1:n.sims) {
x <- rbeta(n, shape1, shape2)
t.test.left <- t.test(x, mu = true_mean, alternative = "less")
t.test.right <- t.test(x, mu = true_mean, alternative = "greater")
t.test.two <- t.test(x, mu = true_mean, alternative = "two.sided")
if (t.test.left$p.value < alpha) left_rejects <- left_rejects + 1
if (t.test.right$p.value < alpha) right_rejects <- right_rejects + 1
if (t.test.two$p.value < alpha) two_rejects <- two_rejects + 1
}
return(c(left = left_rejects / n.sims,
right = right_rejects / n.sims,
two = two_rejects / n.sims))
}
#all three distributions
beta_10_2  <- simulate_type1_error(10, 2, 10 / (10 + 2))
beta_2_10  <- simulate_type1_error(2, 10, 2 / (2 + 10))
beta_10_10 <- simulate_type1_error(10, 10, 0.5)
#results
result <- data.frame(
Distribution = c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)"),
Left_Tailed = c(beta_10_2[1], beta_2_10[1], beta_10_10[1]),
Right_Tailed = c(beta_10_2[2], beta_2_10[2], beta_10_10[2]),
Two_Tailed = c(beta_10_2[3], beta_2_10[3], beta_10_10[3])
)
print(round(result, 4))
print(round(result, 4))
set.seed(2405)
n <- 15
n.sims <- 10000
alpha <- 0.05
# Define test cases
distributions <- tibble(
dist = c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)"),
shape1 = c(10, 2, 10),
shape2 = c(2, 10, 10),
true_mean = c(10/12, 2/12, 0.5)
)
# Run simulations
simulate_errors <- function(shape1, shape2, mu) {
rerun(n.sims, {
x <- rbeta(n, shape1, shape2)
tibble(
left  = t.test(x, mu = mu, alternative = "less")$p.value < alpha,
right = t.test(x, mu = mu, alternative = "greater")$p.value < alpha,
two   = t.test(x, mu = mu, alternative = "two.sided")$p.value < alpha
)
}) |>
bind_rows() |>
summarise(
Left_Tailed = mean(left),
Right_Tailed = mean(right),
Two_Tailed = mean(two)
)
}
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)
# Print formatted results
results |>
select(Distribution = dist, Left_Tailed, Right_Tailed, Two_Tailed) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
result
view(result)
library(tidyverse)
library(VGAM)
library(boot)
c20 <- qt(.95, df = 19)
c30 <- qt(.95, df=29)
#function
sim_experiment <- function() {
#30 samples
observations <- rlaplace(30, location=a, scale=b)
#t stat month 20
mean_20 <- mean(observations[1:20])
sd_20 <- sd(observations[1:20])
t_20 <- (mean_20 - 0) / (sd_20 / sqrt(20))
#rejection check at month 20
if (t_20 > c20) {
return(1)  #reject H0 (early stop)
}
#t stat month 30
mean_30 <- mean(observations)
sd_30 <- sd(observations)
t_30 <- (mean_30 - 0) / (sd_30 / sqrt(30))
#reject check at month 30
if (t_30 > c30) {
return(1)  #reject H0
} else {
return(0)  #fail to reject H0
}
}
#run the simulation
results <- replicate(n_sims, sim_experiment())
#calc Type I error rate
type_I_error <- mean(results)
print(paste("Type I error rate:", round(type_I_error, 4)))
set.seed(2405)
n <- 15
n.sims <- 10000
alpha <- 0.05
# Define test cases
distributions <- tibble(
dist = c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)"),
shape1 = c(10, 2, 10),
shape2 = c(2, 10, 10),
true_mean = c(10/12, 2/12, 0.5)
)
# Run simulations
simulate_errors <- function(shape1, shape2, mu) {
rerun(n.sims, {
x <- rbeta(n, shape1, shape2)
tibble(
left  = t.test(x, mu = mu, alternative = "less")$p.value < alpha,
right = t.test(x, mu = mu, alternative = "greater")$p.value < alpha,
two   = t.test(x, mu = mu, alternative = "two.sided")$p.value < alpha
)
}) |>
bind_rows() |>
summarise(
`Left Tailed` = mean(left),
`Right Tailed` = mean(right),
`Two Tailed` = mean(two)
)
}
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)
library(tidyverse)
library(VGAM)
library(boot)
c20 <- qt(.95, df = 19)
c30 <- qt(.95, df=29)
#function
sim_experiment <- function() {
#30 samples
observations <- rlaplace(30, location=a, scale=b)
#t stat month 20
mean_20 <- mean(observations[1:20])
sd_20 <- sd(observations[1:20])
t_20 <- (mean_20 - 0) / (sd_20 / sqrt(20))
#rejection check at month 20
if (t_20 > c20) {
return(1)  #reject H0 (early stop)
}
#t stat month 30
mean_30 <- mean(observations)
sd_30 <- sd(observations)
t_30 <- (mean_30 - 0) / (sd_30 / sqrt(30))
#reject check at month 30
if (t_30 > c30) {
return(1)  #reject H0
} else {
return(0)  #fail to reject H0
}
}
#run the simulation
results <- replicate(n_sims, sim_experiment())
#calc Type I error rate
type_I_error <- mean(results)
print(paste("Type I error rate:", round(type_I_error, 4)))
set.seed(2405)
n <- 15
n.sims <- 5000
alpha <- 0.05
# Define test cases
distributions <- tibble(
dist = c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)"),
shape1 = c(10, 2, 10),
shape2 = c(2, 10, 10),
true_mean = c(10/12, 2/12, 0.5)
)
# Run simulations
simulate_errors <- function(shape1, shape2, mu) {
rerun(n.sims, {
x <- rbeta(n, shape1, shape2)
tibble(
left  = t.test(x, mu = mu, alternative = "less")$p.value < alpha,
right = t.test(x, mu = mu, alternative = "greater")$p.value < alpha,
two   = t.test(x, mu = mu, alternative = "two.sided")$p.value < alpha
)
}) |>
bind_rows() |>
summarise(
`Left Tailed` = mean(left),
`Right Tailed` = mean(right),
`Two Tailed` = mean(two)
)
}
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)
# Print formatted results
results |>
select(Distribution = dist, `Left Tailed`, `Right Tailed`, `Two Tailed`) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
library(tidyverse)
library(VGAM)
library(boot)
c20 <- qt(.95, df = 19)
c30 <- qt(.95, df=29)
#function
sim_experiment <- function() {
#30 samples
observations <- rlaplace(30, location=a, scale=b)
#t stat month 20
mean_20 <- mean(observations[1:20])
sd_20 <- sd(observations[1:20])
t_20 <- (mean_20 - 0) / (sd_20 / sqrt(20))
#rejection check at month 20
if (t_20 > c20) {
return(1)  #reject H0 (early stop)
}
#t stat month 30
mean_30 <- mean(observations)
sd_30 <- sd(observations)
t_30 <- (mean_30 - 0) / (sd_30 / sqrt(30))
#reject check at month 30
if (t_30 > c30) {
return(1)  #reject H0
} else {
return(0)  #fail to reject H0
}
}
#run the simulation
results <- replicate(n_sims, sim_experiment())
#calc Type I error rate
type_I_error <- mean(results)
print(paste("Type I error rate:", round(type_I_error, 4)))
set.seed(2405)
n <- 30
n.sims <- 5000
alpha <- 0.05
# Define test cases
distributions <- tibble(
dist = c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)"),
shape1 = c(10, 2, 10),
shape2 = c(2, 10, 10),
true_mean = c(10/12, 2/12, 0.5)
)
# Run simulations
simulate_errors <- function(shape1, shape2, mu) {
rerun(n.sims, {
x <- rbeta(n, shape1, shape2)
tibble(
left  = t.test(x, mu = mu, alternative = "less")$p.value < alpha,
right = t.test(x, mu = mu, alternative = "greater")$p.value < alpha,
two   = t.test(x, mu = mu, alternative = "two.sided")$p.value < alpha
)
}) |>
bind_rows() |>
summarise(
`Left Tailed` = mean(left),
`Right Tailed` = mean(right),
`Two Tailed` = mean(two)
)
}
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)
# Print formatted results
results |>
select(Distribution = dist, `Left Tailed`, `Right Tailed`, `Two Tailed`) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
library(tidyverse)
library(VGAM)
library(boot)
c20 <- qt(.95, df = 19)
c30 <- qt(.95, df=29)
#function
sim_experiment <- function() {
#30 samples
observations <- rlaplace(30, location=a, scale=b)
#t stat month 20
mean_20 <- mean(observations[1:20])
sd_20 <- sd(observations[1:20])
t_20 <- (mean_20 - 0) / (sd_20 / sqrt(20))
#rejection check at month 20
if (t_20 > c20) {
return(1)  #reject H0 (early stop)
}
#t stat month 30
mean_30 <- mean(observations)
sd_30 <- sd(observations)
t_30 <- (mean_30 - 0) / (sd_30 / sqrt(30))
#reject check at month 30
if (t_30 > c30) {
return(1)  #reject H0
} else {
return(0)  #fail to reject H0
}
}
#run the simulation
results <- replicate(n_sims, sim_experiment())
#calc Type I error rate
type_I_error <- mean(results)
print(paste("Type I error rate:", round(type_I_error, 4)))
set.seed(2405)
n <- 100
n.sims <- 10000
alpha <- 0.05
# Define test cases
distributions <- tibble(
dist = c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)"),
shape1 = c(10, 2, 10),
shape2 = c(2, 10, 10),
true_mean = c(10/12, 2/12, 0.5)
)
# Run simulations
simulate_errors <- function(shape1, shape2, mu) {
rerun(n.sims, {
x <- rbeta(n, shape1, shape2)
tibble(
left  = t.test(x, mu = mu, alternative = "less")$p.value < alpha,
right = t.test(x, mu = mu, alternative = "greater")$p.value < alpha,
two   = t.test(x, mu = mu, alternative = "two.sided")$p.value < alpha
)
}) |>
bind_rows() |>
summarise(
`Left Tailed` = mean(left),
`Right Tailed` = mean(right),
`Two Tailed` = mean(two)
)
}
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)
# Print formatted results
results |>
select(Distribution = dist, `Left Tailed`, `Right Tailed`, `Two Tailed`) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
library(tidyverse)
library(VGAM)
library(boot)
c20 <- qt(.95, df = 19)
c30 <- qt(.95, df=29)
#function
sim_experiment <- function() {
#30 samples
observations <- rlaplace(30, location=a, scale=b)
#t stat month 20
mean_20 <- mean(observations[1:20])
sd_20 <- sd(observations[1:20])
t_20 <- (mean_20 - 0) / (sd_20 / sqrt(20))
#rejection check at month 20
if (t_20 > c20) {
return(1)  #reject H0 (early stop)
}
#t stat month 30
mean_30 <- mean(observations)
sd_30 <- sd(observations)
t_30 <- (mean_30 - 0) / (sd_30 / sqrt(30))
#reject check at month 30
if (t_30 > c30) {
return(1)  #reject H0
} else {
return(0)  #fail to reject H0
}
}
#run the simulation
results <- replicate(n_sims, sim_experiment())
#calc Type I error rate
type_I_error <- mean(results)
print(paste("Type I error rate:", round(type_I_error, 4)))
set.seed(2405)
n <- 15
n.sims <- 10000
alpha <- 0.05
# Define test cases
distributions <- tibble(
dist = c("Beta(10,2)", "Beta(2,10)", "Beta(10,10)"),
shape1 = c(10, 2, 10),
shape2 = c(2, 10, 10),
true_mean = c(10/12, 2/12, 0.5)
)
# Run simulations
simulate_errors <- function(shape1, shape2, mu) {
rerun(n.sims, {
x <- rbeta(n, shape1, shape2)
tibble(
left  = t.test(x, mu = mu, alternative = "less")$p.value < alpha,
right = t.test(x, mu = mu, alternative = "greater")$p.value < alpha,
two   = t.test(x, mu = mu, alternative = "two.sided")$p.value < alpha
)
}) |>
bind_rows() |>
summarise(
`Left Tailed` = mean(left),
`Right Tailed` = mean(right),
`Two Tailed` = mean(two)
)
}
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)
# Print formatted results
results |>
select(Distribution = dist, `Left Tailed`, `Right Tailed`, `Two Tailed`) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
# Print formatted results
results |>
select(Distribution = dist, `Left Tailed`, `Right Tailed`, `Two Tailed`) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
view(results
view(results)
view(results)
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)
# Print formatted results
results |>
select(Distribution = dist, `Left Tailed`, `Right Tailed`, `Two Tailed`) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
# Map simulation to each row of the distributions table
results <- distributions |>
rowwise() |>
mutate(sim = list(simulate_errors(shape1, shape2, true_mean))) |>
unnest(sim)|>
select(Distribution = dist, `Left Tailed`, `Right Tailed`, `Two Tailed`) |>
mutate(across(where(is.numeric), ~ round(.x, 4)))
view(results)
